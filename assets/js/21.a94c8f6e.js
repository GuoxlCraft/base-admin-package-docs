(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{383:function(e,a,t){"use strict";t.r(a);var n=t(45),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"打包配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打包配置"}},[e._v("#")]),e._v(" 打包配置")]),e._v(" "),t("p",[e._v("本依赖库输出umd格式，产出一个 UMD (Universal Module Definition) 格式的 js 代码文件和样式文件。 由于这样使用不经过构建工具处理，所以还需要产出对应的压缩文件。优点：兼容性好，无论是 cdn 直接引用，还是作为 npm 包通过构建工具使用皆可。 缺点：代码体积大，无论组件库中有没有被用到代码，通通被引入。可能引起页面性能问题，尤其是在移动端使用。")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("p",[e._v("webpack 天然适用umd格式的打包输出，但明显esm的格式更好（支持treeSaking）。但同样的esm兼容性差的问题也无法忽视。后续在vite版本中会添加esm的库的支持。")])]),e._v(" "),t("h2",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),t("h3",{attrs:{id:"入口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#入口"}},[e._v("#")]),e._v(" 入口")]),e._v(" "),t("p",[e._v("首先需要在package.json中指定库的入口。同时不要忘记指定当前库的版本（更新需求）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "name": "base-admin",\n  "version": "1.1.9",\n  "description": "起源项目的基础依赖包",\n  "main": "dist/main.js", // 入口\n  "scripts": { ...\n')])])]),t("p",[e._v("其次，要指定打包的入口")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  entry: {\n    app: './src/main.ts'\n  },\n\n")])])]),t("p",[e._v("然后在入口文件中输出要提供的包")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// components组件\nimport SvgIcon from '_c/SvgIcon/index.vue' // svg组件\nimport ComTable from '_c/ComTable/index.vue' // ComTable组件\nimport ComSearch from '_c/ComSearch/index.vue' // Search组件\nimport ComDialog from '_c/ComDialog/index.vue' // Dialog组件\nimport ComDetail from '_c/ComDetail/index.vue' // Detail组件\nimport ComForm from '_c/ComForm/index.vue' // Form组件\nimport Echart from '_c/Echart/index.vue' // Echart组件\nimport Ellipsis from '_c/Ellipsis/index.vue' // Ellipsis组件\nimport Marquee from '_c/Marquee/index.vue' // Marquee组件\nimport { ElMessage } from '_c/Message' // Message组件\nimport Preview from '_c/Preview' // Preview组件\n\n// layout 组件\nimport showMore from '_l/showMore/index.vue'\n\n// 全局指令\nimport importDirective from '@/directive'\nimport { directive } from '@/directive'\n\n// 全局hooks\nimport $hooks from '@/hooks'\n\n// 全局方法\nimport { $animation, $domUtils, $formRules, $utils, $validate } from '@/utils/index'\n\nexport {\n  SvgIcon,\n  ComTable,\n  ComSearch,\n  ComDialog,\n  ComDetail,\n  ComForm,\n  Echart,\n  Ellipsis,\n  Marquee,\n  ElMessage,\n  Preview,\n  showMore,\n  importDirective,\n  $hooks,\n  $animation,\n  $domUtils,\n  $formRules,\n  $utils,\n  $validate,\n  directive\n}\n\n")])])]),t("h3",{attrs:{id:"build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[e._v("#")]),e._v(" build")]),e._v(" "),t("p",[e._v("在webpack环境中确定好库的输出在哪个编译环境。这里以pro为例。")]),e._v(" "),t("p",[e._v("确定webpack输出路径和命名规则，libraryTarget为输出格式 需改为'umd'")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  output: {\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/dist/',\n    filename: 'main.js',\n    libraryTarget: 'umd',\n    umdNamedDefine: true\n  }\n")])])]),t("h3",{attrs:{id:"externals-不加入编译的依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#externals-不加入编译的依赖"}},[e._v("#")]),e._v(" externals (不加入编译的依赖)")]),e._v(" "),t("p",[e._v("由于本库使用的vue2.7 的 script setup语法编写。该语法有个特殊问题，在父子组件通信中有许多对象需要挂载在vue这个全局实例中。这就要求，但业务库（父）引入依赖库（子）的组件使用的时候，vue的全局实例必须是同一个。npm的规则上，同样是"),t("code",[e._v("import Vue from 'vue'")]),e._v(" 依赖库会优先从自身的node_modules中引入。这就会导致两个vue实例出现。")]),e._v(" "),t("p",[e._v("使用externals能够把依赖包排除出编译，改为其他方式引入。例如externalType为"),t("code",[e._v("commonjs")]),e._v("，则依赖库中引入第三方依赖的语句就会编译成 "),t("code",[e._v("const XXX =require('xxx')")]),e._v("。使得业务库在使用的时候，这个第三方依赖会在业务库下的node_modules中查找。")]),e._v(" "),t("p",[e._v("另外，externals能够有效减少库的体积。绝大多数第三方依赖由业务库提供是最好的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" externals: {\n    vue: {\n      commonjs: 'vue',\n      commonjs2: 'vue',\n      amd: 'vue'\n    },\n    'element-ui':{\n      commonjs: 'element-ui',\n      commonjs2: 'element-ui',\n      amd: 'element-ui'\n    },\n    echarts:{\n      commonjs: 'echarts',\n      commonjs2: 'echarts',\n      amd: 'echarts'\n    }\n  },\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);